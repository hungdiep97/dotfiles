require("settings")
require("plugins.init")
require("keymaps")
require("autocmds")

-- function rename_file()
--   local old_name = vim.fn.expand("%:p")  -- Get the full path of the current file
--   vim.ui.input({ prompt = "New file name: ", default = old_name }, function(new_name)
--     if new_name and new_name ~= "" and new_name ~= old_name then
--       vim.cmd("saveas " .. vim.fn.fnameescape(new_name))  -- Save file as new name
--       vim.fn.delete(old_name)  -- Delete the old file
--       vim.cmd("redraw!")  -- Refresh the buffer display
--     end
--   end)
-- end
--
-- -- Map the function to <Leader>rnf
-- vim.api.nvim_set_keymap("n", "<Leader>rnf", ":lua rename_file()<CR>", { noremap = true, silent = true })
--
-- function trim_end_lines()
--   local save_cursor = vim.fn.getpos(".")
--   vim.cmd([[silent! %s/\($\n\s*\)\+\%$//e]])
--   vim.fn.setpos(".", save_cursor)
-- end
--
-- -- Auto command to call TrimEndLines before saving *.rb files
-- vim.api.nvim_create_autocmd("BufWritePre", {
--   pattern = "*.rb",
--   callback = trim_end_lines,
-- })

-- vim.api.nvim_set_keymap("n", "<C-p>", ":Telescope find_files<CR>", { noremap = true, silent = true })

-- local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
-- if not vim.loop.fs_stat(lazypath) then
--   vim.fn.system({
--     "git",
--     "clone",
--     "--filter=blob:none",
--     "https://github.com/folke/lazy.nvim.git",
--     "--branch=stable",
--     lazypath,
--   })
-- end

-- vim.opt.rtp:prepend(lazypath)

-- require("lazy").setup({
--   -- Ruby & Rails
--   { "slim-template/vim-slim" },
--   { "tpope/vim-bundler" },
--   { "tpope/vim-rails" },
--   { "thoughtbot/vim-rspec" },
--   { "tpope/vim-rake" },
--   { "vim-ruby/vim-ruby" },
--   { "ngmy/vim-rubocop" },
--   { "ThanhKhoaIT/rails-db-migrate.vim" },
--   { "kana/vim-textobj-user" },
--   { "tpope/vim-cucumber" },
--   { "tpope/vim-eunuch" },
--   { "honza/vim-snippets" },
--   { "janko-m/vim-test" },
--   { "pbrisbin/vim-mkdir" },
--   { "tpope/vim-repeat" },
--   { "tpope/vim-rhubarb" },
--   { "tpope/vim-surround" },
--   { "tpope/vim-dispatch" },
--   { "907th/vim-auto-save" },
--   { "diepsohung/vim-move" },
--   { "Yggdroot/indentLine" },
--   { "ntpeters/vim-better-whitespace" },
--   { "mg979/vim-visual-multi", branch = "master" },
--   { "rking/ag.vim" },
--   { "easymotion/vim-easymotion" },
--   { "junegunn/gv.vim" },
--   { "Exafunction/codeium.vim", branch = "main" },
--
--   -- Tmux Navigator
--   { "christoomey/vim-tmux-navigator" },
--
--   -- Git Integration
--   { "tpope/vim-fugitive" },
--
--   -- Code Commenting
--   { "vim-scripts/tComment" },
--   {
--     "nvim-treesitter/nvim-treesitter",
--     build = ":TSUpdate",
--     config = function ()
--       local configs = require("nvim-treesitter.configs")
--
--       configs.setup({
--         ensure_installed = { "ruby", "solidity", "lua", "python", "javascript", "html", "css", "tsx", "typescript", "c", "vim", "vimdoc", "query", "elixir" },
--         sync_install = false,
--         highlight = { enable = true },
--         indent = { enable = true },
--         endwise = { enable = true },
--       })
--     end
--   },
--   {
--     'nvim-lualine/lualine.nvim',
--     dependencies = { 'nvim-tree/nvim-web-devicons' },
--     config = function ()
--       require('lualine').setup({
--         options = {
--           icons_enabled = true,          -- Enable icons in the statusline
--           theme = "auto",                -- Theme for the statusline, "auto" selects a theme based on current colorscheme
--           section_separators = "",       -- No section separators
--           component_separators = "",     -- No component separators
--           disabled_filetypes = {         -- Disable lualine in certain filetypes
--             statusline = {},
--             winbar = {},
--           },
--           always_divide_middle = true,
--         },
--         sections = {
--           lualine_a = { "mode" },                        -- Shows current mode (e.g., NORMAL, INSERT)
--           lualine_b = { "branch", "diff", "diagnostics" }, -- Shows branch, diffs, and diagnostics
--           lualine_c = { "filename" },                    -- Shows the current file name
--           lualine_x = { "encoding", "fileformat", "filetype" }, -- Encoding, format (e.g., UNIX), and file type
--           lualine_y = { "progress" },                    -- Shows progress (e.g., line percentage)
--           lualine_z = { "location" }                     -- Shows line and column location
--         },
--         inactive_sections = {
--           lualine_a = {},
--           lualine_b = {},
--           lualine_c = { "filename" },
--           lualine_x = { "location" },
--           lualine_y = {},
--           lualine_z = {}
--         },
--         tabline = {},
--         extensions = {}
--       })
--     end
--   },
--   {
--     "nvim-tree/nvim-tree.lua",
--     dependencies = { "nvim-tree/nvim-web-devicons" }, -- optional, for file icons
--     config = function()
--       require("nvim-tree").setup({
--         -- custom configuration options for nvim-tree
--         view = { width = 30, side = "left", },
--         renderer = {
--           icons = {
--             show = { git = true, folder = true, file = true, folder_arrow = true, },
--           },
--         },
--         actions = {
--           open_file = { quit_on_open = true, },
--         },
--       })
--     end,
--   },
--   {
--     "ibhagwan/fzf-lua",
--     -- optional for icon support
--     dependencies = { "nvim-tree/nvim-web-devicons" },
--     config = function()
--       -- calling `setup` is optional for customization
--       require("fzf-lua").setup({})
--     end
--   },
--   { "tomasiser/vim-code-dark" },
--   { "neovim/nvim-lspconfig" },
-- })
-- vim.cmd("colorscheme codedark")

-- local fzf = require("fzf-lua")
--
-- vim.api.nvim_create_user_command("RGrails", function(opts)
--   fzf.grep({
--     search = opts.args,
--     rg_opts = "--column --line-number --no-heading --color=always --smart-case -g '!p2p-frontend' -g '*.{rb,erb,vue,js,es6,css,sass,scss,yml,rake,haml}'",
--     previewer = "bat",
--   })
-- end, { nargs = "*" })
--
-- vim.api.nvim_create_user_command("RGall", function(opts)
--   fzf.grep({
--     search = opts.args,
--     rg_opts = "--column --line-number --no-heading --color=always --smart-case -g '!p2p-frontend/public/assets/chunks' -g '*.{rb,erb,vue,js,es6,css,sass,scss,yml,rake,haml,feature}'",
--     previewer = "bat",
--   })
-- end, { nargs = "*" })
--
-- -- Import the lspconfig module
-- local lspconfig = require("lspconfig")
--
-- -- Configure the Solargraph language server
-- lspconfig.solargraph.setup({
--   settings = {
--     solargraph = {
--       diagnostics = true,    -- Enable diagnostics
--       formatting = true,     -- Enable formatting
--       completion = true,     -- Enable completion
--     },
--   },
-- })
--
-- local group = vim.api.nvim_create_augroup("RubyEx", { clear = true })
-- local initialized_ruby_syntax = false
-- vim.api.nvim_create_autocmd("FileType", {
--   group = group,
--   pattern = { "ruby", "eruby" },
--   callback = function()
--     if not initialized_ruby_syntax then
--       vim.cmd([[TSDisable highlight]])
--       vim.cmd([[TSEnable highlight]])
--
--       initialized_ruby_syntax = true
--     end
--   end,
-- })
